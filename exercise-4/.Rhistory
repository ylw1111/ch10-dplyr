# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library(nycflights13)
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library(dplyr)
library(nycflights13)
install.packages(nycflights13)
install.packages("nycflights13")
library(nycflights13)
library("nycflights13")
library(nycflights13)
library(nycflights13)
View(ncyflights13)
View(flights)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
nrow(flights)
ncol(flights)
rownames(flights)
colnames(flights)
??flights
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(flights, time_gained_lost, arr_delay - dep_delay)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(flights, time_gained_lost = arr_delay - dep_delay)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
is.data.frame(flights)
mutate(flights, time_gained_lost = arr_delay - dep_delay)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights_data <- mutate(flights, time_gained_lost = arr_delay - dep_delay)
View(flights_data)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights_data <- arrange(flights_data, -time_gained_lost)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights_data <- mutate(flights, time_gained_lost = arr_delay - dep_delay) %>%
arrange(flights_data, -time_gained_lost)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights_data <- mutate(flights, time_gained_lost = arr_delay - dep_delay) %>%
arrange(-time_gained_lost)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights_data <- flights %>%
mutate(time_gained_lost = arr_delay - dep_delay) %>%
arrange(-time_gained_lost)
View(flights_data)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights_data <- arrange(flights_data, time_gained_lost)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights_data <- flights %>%
mutate(time_gained_lost = arr_delay - dep_delay) %>%
arrange(time_gained_lost)
?hist
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights_data$time_gained_lost[flights_data$time_gained_lost > 0])
# Make a histogram of the amount of time gained using the `hist()` function
hist_time_gained <- hist(flights_data$time_gained_lost[flights_data$time_gained_lost > 0])
hist_time_gained
# Make a histogram of the amount of time gained using the `hist()` function
hist_time_gained <- hist(flights_data$time_gained_lost > 0)
# Make a histogram of the amount of time gained using the `hist()` function
hist_time_gained <- hist(flights_data$time_gained_lost[flights_data$time_gained_lost > 0])
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
avg_gain_or_lost <- flights_data[flights_data$time_gained_lost, ]
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
avg_gain_or_lost <- flights_data[flights_data$time_gained_lost]
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, time_gained_lost = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights_data, time_gained_lost)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- flights %>%
mutate(time_gained_lost = arr_delay - dep_delay) %>%
arrange(time_gained_lost)
# Make a histogram of the amount of time gained using the `hist()` function
hist_time_gained <- hist(flights_data$time_gained_lost[flights_data$time_gained_lost > 0])
# Make a histogram of the amount of time gained using the `hist()` function
hist_time_gained <- hist(flights$time_gained_lost[flights$time_gained_lost > 0])
# Make a histogram of the amount of time gained using the `hist()` function
hist_time_gained <- hist(flights$time_gained_lost)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- mutate(time_gained_lost = arr_delay - dep_delay) %>%
arrange(time_gained_lost)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- mutate(time_gained_lost = arr_delay - dep_delay) %>%
arrange(time_gained_lost)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, time_gained_lost = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights_data, time_gained_lost)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- mutate(time_gained_lost = arr_delay - dep_delay) %>%
arrange(time_gained_lost)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- mutate(time_gained_lost = arr_delay - dep_delay) %>%
arrange(time_gained_lost)
library(nycflights13)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- mutate(time_gained_lost = arr_delay - dep_delay) %>%
arrange(time_gained_lost)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- mutate(time_gained_lost = arr_delay - dep_delay) %>%
arrange(time_gained_lost)
# Make a histogram of the amount of time gained using the `hist()` function
hist_time_gained <- hist(flights$time_gained_lost)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
avg_gain_or_lost <- mean(flights$time_gained_lost, na.rm = TRUE]
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library(dplyr)
install.packages("nycflights13")
library(nycflights13)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
nrow(flights)
ncol(flights)
rownames(flights)
colnames(flights)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- mutate(time_gained_lost = arr_delay - dep_delay) %>%
arrange(time_gained_lost)
# Make a histogram of the amount of time gained using the `hist()` function
hist_time_gained <- hist(flights$time_gained_lost)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarize(flights, mean = mean(flights$time_gained_lost, na.rm = TRUE))
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
jfk_sea <- flights %>%
filter(origin == "JFK", dest = "SEA") %>%
select(origin, dest, time_gains_lost)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
to_sea <- flights %>%
filter(dest = "SEA") %>%
select(origin, dest, time_gains_lost)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
summary <- flights %>%
filter(origin == "JFK", dest == "SEA") %>%
summarise(
avg_time = mean(time_gained_lost, na.rm = T),
min_time = min(time_gained_lost, na.rm = T),
max_time = maz(time_gained_lost, na.rm = T)
)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, time_gained_lost = arr_delay - dep_delay)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- flights %>%
mutate(time_gained_lost = arr_delay - dep_delay) %>%
arrange(time_gained_lost)
# Make a histogram of the amount of time gained using the `hist()` function
hist_time_gained <- hist(flights$time_gained_lost)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarize(flights, mean = mean(flights$time_gained_lost, na.rm = TRUE))
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
to_sea <- flights %>%
filter(dest = "SEA") %>%
select(origin, dest, time_gained_lost)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
to_sea <- flights %>%
filter(dest == "SEA") %>%
select(origin, dest, time_gained_lost)
# On average, did flights to SeaTac gain or loose time?
summarize(to_sea, mean = mean(time_gained_lost))
# On average, did flights to SeaTac gain or loose time?
summarize(to_sea, mean == mean(time_gained_lost))
# On average, did flights to SeaTac gain or loose time?
summarize(to_sea, mean = mean(time_gained_lost))
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
summary <- flights %>%
filter(origin == "JFK", dest == "SEA") %>%
summarise(
avg_time = mean(time_gained_lost, na.rm = T),
min_time = min(time_gained_lost, na.rm = T),
max_time = maz(time_gained_lost, na.rm = T)
)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
summary <- flights %>%
filter(origin == "JFK", dest == "SEA") %>%
summarise(
avg_time = mean(time_gained_lost, na.rm = T),
min_time = min(time_gained_lost, na.rm = T),
max_time = max(time_gained_lost, na.rm = T)
)
# On average, did flights to SeaTac gain or loose time?
summarize(to_sea, mean = mean(time_gained_lost))
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
summary <- flights %>%
filter(origin == "JFK", dest == "SEA") %>%
summarise(
avg_time = mean(time_gained_lost, na.rm = T),
min_time = min(time_gained_lost, na.rm = T),
max_time = max(time_gained_lost, na.rm = T)
)
View(summary)
# On average, did flights to SeaTac gain or loose time?
summarize(to_sea, mean = mean(time_gained_lost), na.rm = T)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarize(flights, mean = mean(time_gained_lost, na.rm = TRUE))
View(flights)
# Exercise 4: practicing with dplyr
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library(dplyr)
install.packages("nycflights13")
library(nycflights13)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
nrow(flights)
ncol(flights)
rownames(flights)
colnames(flights)
??flights
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, time_gained_lost = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights_data, time_gained_lost)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- flights %>%
mutate(time_gained_lost = arr_delay - dep_delay) %>%
arrange(time_gained_lost)
# Make a histogram of the amount of time gained using the `hist()` function
hist_time_gained <- hist(flights$time_gained_lost)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarize(flights, mean = mean(time_gained_lost, na.rm = TRUE))
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
to_sea <- flights %>%
filter(dest == "SEA") %>%
select(origin, dest, time_gained_lost)
# On average, did flights to SeaTac gain or loose time?
summarize(to_sea, mean = mean(time_gained_lost), na.rm = T)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
summary <- flights %>%
filter(origin == "JFK", dest == "SEA") %>%
summarise(
avg_time = mean(time_gained_lost, na.rm = T),
min_time = min(time_gained_lost, na.rm = T),
max_time = max(time_gained_lost, na.rm = T)
)
install.packages("nycflights13")
flights <- flights %>%
mutate(time_gained_lost = arr_delay - dep_delay) %>%
arrange(time_gained_lost)
# Make a histogram of the amount of time gained using the `hist()` function
hist_time_gained <- hist(flights$time_gained_lost)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarize(flights, mean = mean(time_gained_lost, na.rm = TRUE))
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
to_sea <- flights %>%
filter(dest == "SEA") %>%
select(origin, dest, time_gained_lost)
# On average, did flights to SeaTac gain or loose time?
summarize(to_sea, mean = mean(time_gained_lost), na.rm = T)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
summary <- flights %>%
filter(origin == "JFK", dest == "SEA") %>%
summarise(
avg_time = mean(time_gained_lost, na.rm = T),
min_time = min(time_gained_lost, na.rm = T),
max_time = max(time_gained_lost, na.rm = T)
)
View(summary)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
summary <- flights %>%
filter(origin == "JFK", dest == "SEA") %>%
select(air_time) %>%
summarise(
avg_time = mean(time_gained_lost, na.rm = T),
min_time = min(time_gained_lost, na.rm = T),
max_time = max(time_gained_lost, na.rm = T)
)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
summary <- flights %>%
filter(origin == "JFK", dest == "SEA") %>%
select(air_time) %>%
summarise(
avg_time = mean(time_gained_lost, na.rm = T),
min_time = min(time_gained_lost, na.rm = T),
max_time = max(time_gained_lost, na.rm = T)
)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
summary <- flights %>%
filter(origin == "JFK", dest == "SEA") %>%
select(air_time) %>%
summarise(
avg_time = mean(time_gained_lost, na.rm = T),
min_time = min(time_gained_lost, na.rm = T),
max_time = max(time_gained_lost, na.rm = T)
)
View(summary)
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library(nycflights13)
library(dplyr)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
summary <- flights %>%
filter(origin == "JFK", dest == "SEA") %>%
select(air_time) %>%
summarise(
avg_time = mean(time_gained_lost, na.rm = T),
min_time = min(time_gained_lost, na.rm = T),
max_time = max(time_gained_lost, na.rm = T)
)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
summary <- flights %>%
filter(origin == "JFK", dest == "SEA") %>%
select(air_time) %>%
summarize(
avg_time = mean(time_gained_lost, na.rm = T),
min_time = min(time_gained_lost, na.rm = T),
max_time = max(time_gained_lost, na.rm = T)
)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
summary <- flights %>%
filter(origin == "JFK", dest == "SEA") %>%
select(air_time) %>%
summarize(
avg_time = mean(air_time, na.rm = T),
min_time = min(air_time, na.rm = T),
max_time = max(air_time, na.rm = T)
)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
summary <- flights %>%
filter(origin == "JFK", dest == "SEA") %>%
select(air_time) %>%
summarize(
avg_time = mean(air_time, na.rm = T),
min_time = min(air_time, na.rm = T),
max_time = max(air_time, na.rm = T)
)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
summary <- flights %>%
filter(origin == "JFK", dest == "SEA") %>%
select(air_time) %>%
summarize(
avg_time = mean(air_time, na.rm = T),
min_time = min(air_time, na.rm = T),
max_time = max(air_time, na.rm = T)
)
summary
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- group_by(flights, month)
View(dep_delay_by_month)
group_by(flights, month)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- group.by(flights, month)
group.by(flights, month)
group_by(flights, month)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- group_by(flights, month) %>%
summarize(mean = mean(dep_delay))
dep_delay_by_month
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- group_by(flights, month) %>%
summarize(mean = mean(dep_delay), na.rm = T)
dep_delay_by_month
summarize(mean = mean(dep_delay, na.rm = T)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- group_by(flights, month) %>%
summarize(mean = mean(dep_delay, na.rm = T))
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- group_by(flights, month) %>%
summarize(mean = mean(dep_delay, na.rm = T))
dep_delay_by_month
# Which month had the greatest average departure delay?
dep_delay_by_month$month[dep_delay_by_month$mean == max(dep_delay_by_month$month)]
# Which month had the greatest average departure delay?
dep_delay_by_month$month[dep_delay_by_month$mean == max(dep_delay_by_month$month)]
# Which month had the greatest average departure delay?
greatest_month <- dep_delay_by_month$month[dep_delay_by_month$mean == max(dep_delay_by_month$month)]
# Which month had the greatest average departure delay?
dep_delay_by_month %>%
filter(mean == max(mean)) %>%
select(month)
# If your above data frame contains just two columns (e.g., "month", and "delay" in that order), you can create
# a scatterplot by passing that data frame to the 'plot()' function
plot(dep_delay_by_month)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
flights %>%
group_by(dest) %>%
summarize(avg_delay = mean(arr_delay, na.rm = T)) %>%
arrange(-avg_delay)
# You can look up these airports in the `airports` data frame!
view(airports)
# You can look up these airports in the `airports` data frame!
View(airports)
# Which city was flown to with the highest average speed?
flights %>%
mutate(average_speed = distance / air_time) %>%
group_by(dest) %>%
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
largest_arrival_delay <- flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = T)) %>%
mutate(faa = dest)
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library(nycflights13)
library(dplyr)
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
largest_arrival_delay <- flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = T)) %>%
mutate(faa = dest)
